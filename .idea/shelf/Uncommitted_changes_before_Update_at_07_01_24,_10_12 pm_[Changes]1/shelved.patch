Index: src/Network/Database/Connection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Network.Database;\n\nimport Frames.Options.AccountStatement.model.Transaction;\n\nimport io.github.cdimascio.dotenv.Dotenv;\n\nimport java.math.BigDecimal;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\n\npublic class Connection {\n    private static final Logger LOGGER = Logger.getLogger(Connection.class.getName());\n    Dotenv dotenv = Dotenv.load();\n    public String url = dotenv.get(\"URL\");\n    public String database = dotenv.get(\"DATABASE\");\n    public String user = dotenv.get(\"ROOT_USER\");\n    public String password = dotenv.get(\"PASSWORD\");\n    private final String accountTable = dotenv.get(\"ACCOUNT_TABLE\");\n    private final String userTable = dotenv.get(\"USER_TABLE\");\n\n    private final String transactionTable = dotenv.get(\"TRANSACTION_TABLE\");\n    private final String upiTable = dotenv.get(\"UPI_TABLE\");\n    public java.sql.Connection connection;\n\n    public Connection() {\n        try {\n            connection = DriverManager.getConnection((url + database), user, password);\n            LOGGER.info(\"Connected to the database!\");\n        } catch (Exception e) {\n            LOGGER.info(e.getMessage());\n            System.exit(0);\n        }\n    }\n\n    public Map<String, Object> checkAccountNumber(Long accountNumber) {\n        Map<String, Object> response = new HashMap<>();\n\n        try {\n            String query = \"SELECT * FROM \" + accountTable + \" WHERE accountNumber = \" + accountNumber;\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(query);\n\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n\n            while (resultSet.next()) {\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    response.put(columnName, columnValue);\n                }\n            }\n            LOGGER.info(\"Account number verified : \\n\" + response);\n            return response;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        } finally {\n//            try {\n//                connection.close();\n//            } catch (SQLException e) {\n//                LOGGER.info(\"Exception : \\n\" + e.getMessage());\n//                throw new RuntimeException(e);\n//            }\n        }\n        LOGGER.warning(\"Account number not verified : \\n\" + response);\n        return response;\n    }\n\n    public Map<String, Object> checkPinNumber(int userId, int pinNo) {\n        Map<String, Object> response = new HashMap<>();\n        try {\n            String query = \"SELECT * FROM \" + userTable + \" WHERE id = \" + userId + \" AND pin = \" + pinNo;\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(query);\n\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n            LOGGER.info(\"MetaData \\n : \" + metaData);\n            while (resultSet.next()) {\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    response.put(columnName, columnValue);\n                }\n            }\n            LOGGER.info(\"PIN Verified : \\n\" + response);\n            return response;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        }\n        LOGGER.info(\"PIN Not Verified : \\n\" + response);\n        return response;\n    }\n\n    public boolean updateOTP(int userId) {\n        try {\n            int otp = generateOTP();\n            String query = \"UPDATE \" + userTable + \" SET otp = \" + otp + \" WHERE id = \" + userId;\n            Statement statement = connection.createStatement();\n            int rowsUpdated = statement.executeUpdate(query);\n            LOGGER.info(\"OTP : \" + otp);\n            return rowsUpdated > 0;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        } finally {\n//            try {\n//                connection.close();\n//            } catch (SQLException e) {\n//                LOGGER.info(\"Exception : \\n\" + e.getMessage());\n//                throw new RuntimeException(e);\n//            }\n        }\n        LOGGER.info(\"OTP Not Updated\");\n        return false;\n    }\n\n\n    public int generateOTP() {\n        return (int) (Math.random() * 900000) + 100000;\n    }\n\n    public Map<String, Object> checkOTP(int userId, int otp) {\n        Map<String, Object> response = new HashMap<>();\n        try {\n            String query = \"SELECT * FROM \" + userTable + \" WHERE id = \" + userId + \" AND otp = \" + otp;\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(query);\n\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n\n            while (resultSet.next()) {\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    response.put(columnName, columnValue);\n                }\n            }\n            LOGGER.info(\"OTP Verified : \\n\" + response);\n            return response;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        }\n        LOGGER.info(\"OTP Not Verified : \\n\" + response);\n        return response;\n    }\n\n    public Map<String, Object> debitAmount(int amount, int userId, Long accountNumber, String msg) {\n        Map<String, Object> response = new HashMap<>();\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n\n        try {\n\n            // Set auto-commit to false to start a transaction\n            connection.setAutoCommit(false);\n\n            // Check if the user exists\n            String checkUserQuery = \"SELECT * FROM user WHERE id = ?\";\n            preparedStatement = connection.prepareStatement(checkUserQuery);\n            preparedStatement.setInt(1, userId);\n            resultSet = preparedStatement.executeQuery();\n\n            if (!resultSet.next()) {\n                response.put(\"success\", false);\n                response.put(\"message\", \"User does not exist\");\n                return response;\n            }\n\n            // Get the current balance of the user\n            String getBalanceQuery = \"SELECT balance FROM account WHERE userId = ?\";\n            preparedStatement = connection.prepareStatement(getBalanceQuery);\n            preparedStatement.setInt(1, userId);\n            resultSet = preparedStatement.executeQuery();\n\n            if (resultSet.next()) {\n                double currentBalance = resultSet.getDouble(\"balance\");\n\n                // Check if the user has enough balance to debit\n                if (currentBalance >= amount) {\n                    // Debit the amount\n                    String debitQuery = \"UPDATE account SET balance = balance - ? WHERE userId = ?\";\n                    preparedStatement = connection.prepareStatement(debitQuery);\n                    preparedStatement.setDouble(1, amount);\n                    preparedStatement.setInt(2, userId);\n                    int rowsUpdated = preparedStatement.executeUpdate();\n                    if (rowsUpdated > 0) {\n                        // Insert transaction record\n                        String insertTransactionQuery = \"INSERT INTO \" + transactionTable + \"(accountNumber, transaction,transactionDetail, amount, date, time) VALUES (?, ?,?, ?, CURDATE(), CURTIME())\";\n                        LOGGER.info(\"insertTransactionQuery : \\n\" + insertTransactionQuery);\n                        preparedStatement = connection.prepareStatement(insertTransactionQuery);\n                        preparedStatement.setLong(1, accountNumber); // Assuming you have the accountNumber available\n                        preparedStatement.setString(2, \"withdrawal\");\n                        preparedStatement.setString(3, msg);\n                        preparedStatement.setDouble(4, amount);\n                        int rowsInserted = preparedStatement.executeUpdate();\n\n                        if (rowsInserted > 0) {\n                            response.put(\"success\", true);\n                            response.put(\"message\", \"Amount debited successfully\");\n                            // Commit the transaction\n                            connection.commit();\n                        } else {\n                            response.put(\"success\", false);\n                            response.put(\"message\", \"Failed to insert transaction record\");\n                        }\n                    } else {\n                        response.put(\"success\", false);\n                        response.put(\"message\", \"Failed to debit amount\");\n                    }\n                } else {\n                    response.put(\"success\", false);\n                    response.put(\"message\", \"Insufficient balance\");\n                }\n            } else {\n                response.put(\"success\", false);\n                response.put(\"message\", \"Error retrieving balance\");\n            }\n\n\n        } catch (SQLException e) {\n            response.put(\"success\", false);\n            response.put(\"message\", \"SQL Exception: \" + e.getLocalizedMessage());\n\n            // Rollback the transaction if any exception occurs\n            try {\n                if (connection != null) {\n                    connection.rollback();\n                }\n            } catch (SQLException ex) {\n                response.put(\"message\", \"Rollback Exception: \" + ex.getMessage());\n            }\n        } finally {\n            // Reset auto-commit to true and close resources\n\n            try {\n                if (connection != null) {\n                    connection.setAutoCommit(true);\n//                    connection.close();\n                }\n            } catch (SQLException ex) {\n                response.put(\"success\", false);\n                response.put(\"message\", \"Auto-commit Exception: \" + ex.getMessage());\n            }\n        }\n        LOGGER.info(\"response : \\n\" + response);\n\n        return response;\n    }\n\n\n    public Map<String, Object> creditAmount(int amount, int userId, Long accountNumber) {\n        Map<String, Object> response = new HashMap<>();\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n\n        try {\n\n            // Set auto-commit too false to start a transaction\n            connection.setAutoCommit(false);\n\n            // Check if the user exists\n            String checkUserQuery = \"SELECT * FROM user WHERE id = ?\";\n            preparedStatement = connection.prepareStatement(checkUserQuery);\n            preparedStatement.setInt(1, userId);\n            resultSet = preparedStatement.executeQuery();\n\n            if (!resultSet.next()) {\n                response.put(\"success\", false);\n                response.put(\"message\", \"User does not exist\");\n                return response;\n            }\n\n            // Get the current balance of the user\n            String getBalanceQuery = \"SELECT balance FROM account WHERE userId = ?\";\n            preparedStatement = connection.prepareStatement(getBalanceQuery);\n            preparedStatement.setInt(1, userId);\n            resultSet = preparedStatement.executeQuery();\n\n            if (resultSet.next()) {\n\n                // Credit the amount\n                String debitQuery = \"UPDATE account SET balance = balance + ? WHERE userId = ?\";\n                preparedStatement = connection.prepareStatement(debitQuery);\n                preparedStatement.setDouble(1, amount);\n                preparedStatement.setInt(2, userId);\n                int rowsUpdated = preparedStatement.executeUpdate();\n\n                if (rowsUpdated > 0) {\n                    // Insert transaction record\n                    String insertTransactionQuery = \"INSERT INTO \" + transactionTable + \"(accountNumber, transaction,transactionDetail, amount, date, time) VALUES (?, ?,?, ?, CURDATE(), CURTIME())\";\n                    preparedStatement = connection.prepareStatement(insertTransactionQuery);\n                    preparedStatement.setLong(1, accountNumber); // Assuming you have the accountNumber available\n                    preparedStatement.setString(2, \"deposit\");\n                    preparedStatement.setString(3, \"deposit amount by ATM\");\n                    preparedStatement.setDouble(4, amount);\n                    int rowsInserted = preparedStatement.executeUpdate();\n\n                    if (rowsInserted > 0) {\n                        response.put(\"success\", true);\n                        response.put(\"message\", \"Amount credited successfully\");\n                        connection.commit();\n                    } else {\n                        response.put(\"success\", false);\n                        response.put(\"message\", \"Failed to insert transaction record\");\n                    }\n                } else {\n                    response.put(\"success\", false);\n                    response.put(\"message\", \"Failed to credit amount\");\n                }\n            } else {\n                response.put(\"success\", false);\n                response.put(\"message\", \"Error retrieving balance\");\n            }\n\n        } catch (SQLException e) {\n            response.put(\"success\", false);\n            response.put(\"message\", \"SQL Exception: \" + e.getMessage());\n\n            // Rollback the transaction if any exception occurs\n            try {\n                if (connection != null) {\n                    connection.rollback();\n                }\n            } catch (SQLException ex) {\n                response.put(\"success\", false);\n                response.put(\"message\", \"Rollback Exception: \" + ex.getMessage());\n            }\n        } finally {\n            // Reset auto-commit to true and close resources\n            try {\n                if (connection != null) {\n                    connection.setAutoCommit(true);\n                }\n            } catch (SQLException ex) {\n                response.put(\"success\", false);\n                response.put(\"message\", \"Auto-commit Exception: \" + ex.getMessage());\n            }\n        }\n        LOGGER.info(\"response : \\n\" + response);\n\n        return response;\n    }\n\n\n    public Map<String, Object> checkBalance(int userId) {\n        Map<String, Object> response = new HashMap<>();\n        try {\n            String query = \"SELECT * FROM \" + accountTable + \" WHERE userId = \" + userId;\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(query);\n\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n\n            while (resultSet.next()) {\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    response.put(columnName, columnValue);\n                }\n            }\n            LOGGER.info(\"Balance Verified : \\n\" + response);\n            return response;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        }\n        LOGGER.info(\"Balance Not Verified : \\n\" + response);\n        return response;\n    }\n\n    public ArrayList<Transaction> getTransactions(Long accountNumber) {\n        ArrayList<Transaction> list = new ArrayList<>();\n        try {\n            String query = \"SELECT * FROM \" + transactionTable + \" WHERE accountNumber = \" + accountNumber;\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(query);\n\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n\n            LOGGER.info(\"MetaData \\n : \" + metaData);\n\n            while (resultSet.next()) {\n                Map<String, Object> response = new HashMap<>();\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    response.put(columnName, columnValue);\n                }\n                list.add(\n                        new Transaction(\n                                (String) response.get(\"date\"),\n                                (BigDecimal) response.get(\"amount\"),\n                                (int) response.get(\"id\"),\n                                (String) response.get(\"time\"),\n                                (Long) response.get(\"accountNumber\"),\n                                (String) response.get(\"transaction\"),\n                                (String) response.get(\"transactionDetail\"))\n                );\n            }\n            LOGGER.info(\"Balance Verified : \\n\" + list);\n            return list;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        }\n        LOGGER.info(\"Balance Not Verified : \\n\" + list);\n        return list;\n    }\n\n    public boolean changePin(int newPin, int id) {\n        try {\n            String query = \"UPDATE \" + userTable + \" SET pin = \" + newPin + \" WHERE id = \" + id;\n            Statement statement = connection.createStatement();\n            int rowsUpdated = statement.executeUpdate(query);\n            LOGGER.info(\"Pin Updated : \\n\" + rowsUpdated);\n            return true;\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n            return false;\n        }\n\n    }\n\n    public Map<String, Object> verifyUPI(String upiId) {\n        Map<String, Object> response = new HashMap<>();\n        try {\n            String query = \"SELECT * FROM \" + upiTable + \" WHERE upiId = '\" + upiId + \"'\";\n            LOGGER.info(\"query : \\n\" + query);\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(query);\n\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n            while (resultSet.next()) {\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    response.put(columnName, columnValue);\n                }\n            }\n            if (columnCount > 0) {\n                LOGGER.info(\"UPI Verified : \\n\" + response);\n                return response;\n            }\n        } catch (Exception e) {\n            LOGGER.info(\"Exception : \\n\" + e.getMessage());\n        }\n        LOGGER.info(\"UPI Not Verified : \\n\" + response);\n        return response;\n    }\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Network/Database/Connection.java b/src/Network/Database/Connection.java
--- a/src/Network/Database/Connection.java	
+++ b/src/Network/Database/Connection.java	
@@ -79,7 +79,6 @@
 
             ResultSetMetaData metaData = resultSet.getMetaData();
             int columnCount = metaData.getColumnCount();
-            LOGGER.info("MetaData \n : " + metaData);
             while (resultSet.next()) {
                 for (int i = 1; i <= columnCount; i++) {
                     String columnName = metaData.getColumnName(i);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"63c401c7-b33a-449f-883d-db062287d4f9\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.exenv\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.exenv\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/sqldialects.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sqldialects.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/src/Frames/Home.java\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2ZInLpNRThRF75MGehAUvKbxMg6\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;Application.Connection.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Home.executor&quot;: &quot;Run&quot;,\n    &quot;Application.JTabbedPaneExample.executor&quot;: &quot;Run&quot;,\n    &quot;Application.JTableExample.executor&quot;: &quot;Run&quot;,\n    &quot;Application.JTreeExample.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;true&quot;,\n    &quot;Java Scratch.Unnamed.executor&quot;: &quot;Run&quot;,\n    &quot;Repository.Attach.Annotations&quot;: &quot;true&quot;,\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;true&quot;,\n    &quot;Repository.Attach.Sources&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/pragneshkoli/Desktop/ATM_System/src/Frames/Options/Withdrew&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.24367817&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/Frames/Options/Withdrew\" />\n      <recent name=\"$PROJECT_DIR$/src/Images\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src\" />\n      <recent name=\"$PROJECT_DIR$/src/Network\" />\n      <recent name=\"$PROJECT_DIR$/src/Frames\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"ATM_System\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Unnamed\" type=\"Java Scratch\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"main\" />\n      <module name=\"ATM_System\" />\n      <option name=\"SCRATCH_FILE_URL\" value=\"file://$PROJECT_DIR$/src/Main.java\" />\n      <shortenClasspath name=\"NONE\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"Java Scratch\">\n      <option name=\"SCRATCH_FILE_URL\" value=\"file://$PROJECT_DIR$/src/Main.java\" />\n      <shortenClasspath name=\"NONE\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Main\" />\n      <item itemvalue=\"Java Scratch.Unnamed\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"63c401c7-b33a-449f-883d-db062287d4f9\" name=\"Changes\" comment=\"\" />\n      <created>1702118407787</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1702118407787</updated>\n      <workItem from=\"1702118409019\" duration=\"6840000\" />\n      <workItem from=\"1702125382058\" duration=\"13661000\" />\n      <workItem from=\"1702295578307\" duration=\"1727000\" />\n      <workItem from=\"1702436771603\" duration=\"1222000\" />\n      <workItem from=\"1702531198400\" duration=\"8730000\" />\n      <workItem from=\"1702696934915\" duration=\"7477000\" />\n      <workItem from=\"1702876196542\" duration=\"50000\" />\n      <workItem from=\"1702876273953\" duration=\"8784000\" />\n      <workItem from=\"1702974317983\" duration=\"4331000\" />\n      <workItem from=\"1702992318098\" duration=\"756000\" />\n      <workItem from=\"1703219839260\" duration=\"4449000\" />\n      <workItem from=\"1703307437880\" duration=\"22612000\" />\n      <workItem from=\"1703428309005\" duration=\"12660000\" />\n      <workItem from=\"1703605226831\" duration=\"15571000\" />\n      <workItem from=\"1704097943917\" duration=\"402000\" />\n      <workItem from=\"1704098357222\" duration=\"599000\" />\n      <workItem from=\"1704442568451\" duration=\"391000\" />\n      <workItem from=\"1704442971527\" duration=\"5141000\" />\n      <workItem from=\"1704519334690\" duration=\"12829000\" />\n      <workItem from=\"1704613161734\" duration=\"9552000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,10 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="63c401c7-b33a-449f-883d-db062287d4f9" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.exenv" beforeDir="false" afterPath="$PROJECT_DIR$/.exenv" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sqldialects.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sqldialects.xml" afterDir="false" />
+    <list default="true" id="63c401c7-b33a-449f-883d-db062287d4f9" name="Changes" comment="example env updated">
+      <change beforePath="$PROJECT_DIR$/.env" beforeDir="false" afterPath="$PROJECT_DIR$/.env" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Network/Database/Connection.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Network/Database/Connection.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -143,6 +143,15 @@
       <workItem from="1704519334690" duration="12829000" />
       <workItem from="1704613161734" duration="9552000" />
     </task>
+    <task id="LOCAL-00001" summary="example env updated">
+      <option name="closed" value="true" />
+      <created>1704635113101</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1704635113101</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -150,5 +159,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+    <MESSAGE value="example env updated" />
+    <option name="LAST_COMMIT_MESSAGE" value="example env updated" />
   </component>
 </project>
\ No newline at end of file
